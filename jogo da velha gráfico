// incluir x.bmp e o.bmp
#include <stdio.h>
#include <stdlib.h>
#include <SDL2/SDL.h>

#define SCREEN_WIDTH 300
#define SCREEN_HEIGHT 300
#define ROWS 3
#define COLS 3

SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
SDL_Texture* xTexture = NULL;
SDL_Texture* oTexture = NULL;
int board[ROWS][COLS] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
int currentPlayer = 1;
int winner = 0;

void drawBoard() {
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderClear(renderer);

    // Draw grid lines
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    for (int i = 1; i < ROWS; ++i) {
        SDL_RenderDrawLine(renderer, 0, i * (SCREEN_HEIGHT / ROWS), SCREEN_WIDTH, i * (SCREEN_HEIGHT / ROWS));
    }
    for (int i = 1; i < COLS; ++i) {
        SDL_RenderDrawLine(renderer, i * (SCREEN_WIDTH / COLS), 0, i * (SCREEN_WIDTH / COLS), SCREEN_HEIGHT);
    }

    // Draw X's and O's
    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            if (board[i][j] == 1) { // X
                SDL_Rect rect = {j * (SCREEN_WIDTH / COLS), i * (SCREEN_HEIGHT / ROWS), SCREEN_WIDTH / COLS, SCREEN_HEIGHT / ROWS};
                SDL_RenderCopy(renderer, xTexture, NULL, &rect);
            } else if (board[i][j] == -1) { // O
                SDL_Rect rect = {j * (SCREEN_WIDTH / COLS), i * (SCREEN_HEIGHT / ROWS), SCREEN_WIDTH / COLS, SCREEN_HEIGHT / ROWS};
                SDL_RenderCopy(renderer, oTexture, NULL, &rect);
            }
        }
    }

    SDL_RenderPresent(renderer);
}

void handleClick(int x, int y) {
    if (winner != 0) {
        return;
    }
    int row = y / (SCREEN_HEIGHT / ROWS);
    int col = x / (SCREEN_WIDTH / COLS);
    if (row >= 0 && row < ROWS && col >= 0 && col < COLS && board[row][col] == 0) {
        board[row][col] = currentPlayer;
        currentPlayer = -currentPlayer;
        // Check for winner...
        // Draw board
        drawBoard();
    }
}

int main(int argc, char* argv[]) {
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        printf("SDL_Init Error: %s\n", SDL_GetError());
        return 1;
    }

    window = SDL_CreateWindow("Jogo da Velha", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == NULL) {
        printf("SDL_CreateWindow Error: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == NULL) {
        SDL_DestroyWindow(window);
        printf("SDL_CreateRenderer Error: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    SDL_Surface* xSurface = SDL_LoadBMP("x.bmp");
    if (xSurface == NULL) {
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        printf("SDL_LoadBMP Error: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }
    xTexture = SDL_CreateTextureFromSurface(renderer, xSurface);
    SDL_FreeSurface(xSurface);

    SDL_Surface* oSurface = SDL_LoadBMP("o.bmp");
    if (oSurface == NULL) {
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        printf("SDL_LoadBMP Error: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }
    oTexture = SDL_CreateTextureFromSurface(renderer, oSurface);
    SDL_FreeSurface(oSurface);

    drawBoard();

    int quit = 0;
    SDL_Event e;
    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = 1;
            } else if (e.type == SDL_MOUSEBUTTONDOWN) {
                int x, y;
                SDL_GetMouseState(&x, &y);
                handleClick(x, y);
            }
        }
    }

    SDL_DestroyTexture(xTexture);
    SDL_DestroyTexture(oTexture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
